package MultiStageDesign
public

	with datatypes;
	with devices;
	with image_processing;
	with distance_processing;
	with Data_Model;
	with Base_Types;
	with Hybrid_EnvAADL;
	with Dynamics;
	with VehicleVar;

	system MultiStageDesign
	end MultiStageDesign;

	system implementation MultiStageDesign.functional
	subcomponents
		-- input devices
		camera: device devices::camera;
		radar1: device devices::radar1;
		radar2: device devices::radar2;

		laser: device devices::induction_speed_sensor;
		wheel: device devices::optical_speed_sensor;
		acceleration_pedal: device devices::acceleration_pedal;
		rainfall_sensor: device devices::rainfall_sensor;
		light_sensor: device devices::light_sensor;
		steering_angle_sensor: device MultiStageDesign::steering_angle_sensor;

		-- software and processing
		image_analysis: process image_processing::image_analysis.i;
		distance_voter: process distance_processing::distance_voter.i;

		speed_voter: process MultiStageDesign::speed_voter.i;

		speed_controller: process MultiStageDesign::speed_controller.i;
		angle_analysis: process MultiStageDesign::angle_analysis.i;

		speedactuator: device MultiStageDesign::speedactuator;
		Steering: device MultiStageDesign::Steering;

		Environment: process MultiStageDesign::Environment.impl;
		angle_sensor: device steering_angle_sensor;
		angle_analysisprocess: process angle_analysis.i;
	connections
		-- inputs to processes	
		c00: port camera.picture -> image_analysis.picture;
		c01: port radar1.distance -> distance_voter.distance1;
		c02: port radar2.distance -> distance_voter.distance2;
		--c03: port traffic_lane_sensor.lane_crossed -> overtaking_detection.lane_change;
		c04: port laser.speed -> speed_voter.speed1;
		c05: port wheel.speed -> speed_voter.speed2;
		--c06: port acceleration_pedal.speed -> panel_controller.desired_speed;
		c07: port acceleration_pedal.speed -> speed_controller.desired_speed;

		c072: port rainfall_sensor.rain -> Environment.rain;
		c073: port light_sensor.light -> Environment.light;
		c074: port steering_angle_sensor.steering_angle -> angle_analysis.Isangle;
		c075: port angle_analysis.Osangle -> Environment.Iangle1;

		c09: port speed_voter.speed_result -> speed_controller.current_speed;
		--c10: port overtaking_detection.overtaking_active -> speed_controller.overtaking_active;
		c11: port distance_voter.distance_result -> speed_controller.current_distance;
		c111: port Environment.Omu -> speed_controller.Imu;
		c112: port Environment.Op -> speed_controller.Ip;
		c113: port Environment.Oerror -> speed_controller.Ierror;
		c114: port Environment.Oa1 -> speed_controller.Ia1;
		c115: port Environment.Ox1 -> speed_controller.Ix1;
		c116: port Environment.Oy1 -> speed_controller.Iy1;
		c117: port Environment.Oangle1 -> speed_controller.Iangle2;
		c14: port speed_controller.controlspeed_cmd -> speedactuator.control_speed_cmd;
		c141: port speed_controller.steering_cmd -> Steering.steer_ing_cmd;

		integration73_functional_new_connection2: port speedactuator.speed2 -> laser.speed_v2;
		integration73_functional_new_connection: port speedactuator.speed1 -> wheel.speed_v1;

		integration73_functional_new_connection3: port Steering.pangle -> angle_sensor.psangle;
		integration73_functional_new_connection4: port angle_sensor.steering_angle -> angle_analysisprocess.Isangle;
	properties
		Hybrid_EnvAADL::Sampling_Time => 1ms .. 3ms;
		Hybrid_EnvAADL::Response_Time => 4ms .. 6ms;

	end MultiStageDesign.functional;

--we add--
	process Environment
	features
		picture: in data port datatypes::picture;
		rain: in data port datatypes::rain;
		IEenva: in data port Base_Types::Float;
		Imu: in data port Base_Types::Float;
		Ip: in data port Base_Types::Float;

		light: in data port datatypes::light;

		Omu: out data port Base_Types::Float;
		Op: out data port Base_Types::Float;
		Oerror: out data port Base_Types::Float;

		Oa1: out data port Base_Types::Float;
		Ox1: out data port Base_Types::Float;
		Oy1: out data port Base_Types::Float;
		Oangle1: out data port Base_Types::Float;
		Iangle1: in data port Base_Types::Float;

		obstacle_detected: in data port datatypes::boolean;
	flows
		f0: flow path picture -> Omu;
		f1: flow path rain -> Omu;
		f2: flow path Imu -> Omu;
		f3: flow path picture -> Op;
		f4: flow path Ip -> Op;
		f5: flow path light -> Oerror;

	
end Environment;

	process implementation Environment.impl
		subcomponents
			a1: data Base_Types::Float;
			x1: data Base_Types::Float;
			y1: data Base_Types::Float;
			angle1: data Base_Types::Float;
			
			EnvironmentThread : thread EnvironmentThread.i;
		
		
	end Environment.impl;
	
	thread EnvironmentThread
		features
		
		Ia1: out data port Base_Types::Float;
		Ix1: out data port Base_Types::Float;
		Iy1: out data port Base_Types::Float;
		properties
		Hybrid_EnvAADL::isEnvironment => true;
		Hybrid_EnvAADL::ContinuousDynamics => "x_k'=v_k ; v_k'=a_k ;";

	end EnvironmentThread;
	
	thread implementation EnvironmentThread.i
		annex behavior_specification {**
		  variables
            x_k : Base_Types::Float;
			v_k : Base_Types::Float;
			a_k : Base_Types::Float;
            
          states
            init3 : initial complete state;

            **};

	end EnvironmentThread.i;

	process speed_controller
	features

		current_distance: in data port datatypes::distance;

		current_speed: in data port datatypes::speed;
		desired_speed: in data port datatypes::speed;

		Imu: in data port Base_Types::Float;
		Ip: in data port Base_Types::Float;
		Ierror: in data port Base_Types::Float;

		Ia1: in data port Base_Types::Float;
		Ix1: in data port Base_Types::Float;
		Iy1: in data port Base_Types::Float;
		Iangle2: in data port Base_Types::Float;

		controlspeed_cmd: out data port Base_Types::Float;
		steering_cmd: out data port Base_Types::Float;

		current_angle: in data port datatypes::speed;
	flows

		f10: flow path current_speed -> controlspeed_cmd;
		f12: flow path current_distance -> controlspeed_cmd;
		f14: flow path desired_speed -> controlspeed_cmd;
		f15: flow path Imu -> controlspeed_cmd;
		f16: flow path Ip -> controlspeed_cmd;
		f17: flow path Ierror -> controlspeed_cmd;
		f21: flow path Ia1 -> controlspeed_cmd;
		f22: flow path Ix1 -> controlspeed_cmd;
		f23: flow path Iy1 -> controlspeed_cmd;
		f24: flow path Iangle2 -> controlspeed_cmd;

end speed_controller;

	process implementation speed_controller.i
	subcomponents

		CACCControllerThread: thread CACCControllerThread.impl;

	connections
		speed_controller_i_new_connection2: port Imu -> CACCControllerThread.Imu;
		speed_controller_i_new_connection3: port Ip -> CACCControllerThread.Ip;
		
		speed_controller_i_new_connection9: port Ia1 -> CACCControllerThread.Ia1;
		
end speed_controller.i;

	
	thread CACCControllerThread
	features
		Imu: in data port Base_Types::Float;
		Ip: in data port Base_Types::Float;
		Ia1: in data port Base_Types::Float;
		Icegox: in data port Base_Types::Float;
		Icegov: in data port Base_Types::Float;
		Icegoa: in data port Base_Types::Float;
		Ocegov: out data port Base_Types::Float;
		Ocegoa: out data port Base_Types::Float;

		emergency: out data port Base_Types::Float;
		driveroper: out data port Base_Types::Float;
		Ierror: in data port Base_Types::Float;
		brake_cmd: out data port Base_Types::Float;
	properties
		Dispatch_Protocol => Periodic;
		Hybrid_EnvAADL::isController => true;
end CACCControllerThread;

	thread implementation CACCControllerThread.impl
		subcomponents			
			close: data Base_Types::Boolean {Data_Model::Initial_Value => ("false");};
		properties
		    Hybrid_EnvAADL::initvar => "t==0 &  x_k==130 & y_k==0 & x_e==50 & y_e==0  & v_k==5 & v_e==10 & a_e==0 & theta_k==0 & theta_e==0 & angle_e==0 & L==2 & msample ==1 & psample==0.2 & error==0.01 & period==10 & D==130 & dc==-1 & dt==100 & dsafe ==50 & dd==-1 & amax==10 & a_k==0 & angle_k==0 & km==1.5 & fd==1000 & CACC == 1 & manual == -1 & action == 1";
			Hybrid_EnvAADL::guessname =>"[u4,mu,u,p]";
			Hybrid_EnvAADL::minmu => "[-8,0.6,-3,0.01]";
			Hybrid_EnvAADL::maxmu => "[8,0.7,3,0.03]";
			Hybrid_EnvAADL::ContinuousDynamics => "x_e'=v_e;";
			Hybrid_EnvAADL::invariant => "t<3 ; t<6 ; t<9 ; t<10";

		annex behavior_specification {**variables
			
            x_k : Base_Types::Float;
		    y_k : Base_Types::Float;
		    x_e : Base_Types::Float;
		    y_e : Base_Types::Float;
		
		    v_k : Base_Types::Float;
		    v_e : Base_Types::Float;
		
			control_a_e : Base_Types::Float;
		    a_e : Base_Types::Float;
		    t : Base_Types::Float;
		
		   
		    theta_k : Base_Types::Float;
		    angle_k : Base_Types::Float;
		    theta_e : Base_Types::Float;
		    angle_e : Base_Types::Float;
		
		    L : Base_Types::Float;
		
		    period : Base_Types::Float;
		
		    msample : Base_Types::Float;
		    psample : Base_Types::Float;
		    error : Base_Types::Float;
		
		    
		    D : Base_Types::Float;
		    dc : Base_Types::Float;
		    dt : Base_Types::Float;
		    dsafe : Base_Types::Float;
		    dd : Base_Types::Float;
		    amax : Base_Types::Float;

		    u4 : Dynamics::uncontrolled;
		    
		    mu : Dynamics::uncontrolled;
		    u : Dynamics::uncontrolled;
		    p : Dynamics::uncontrolled;

			a_k : Base_Types::Float;
			
			 CACC : Base_Types::Float;
			 manual : Base_Types::Float;
			 action : Base_Types::Float;
			   
			 km : Base_Types::Float;
			 fd : Base_Types::Float;
          states
            init : initial complete state ;
            CACCs : state;
            SP : state;
            ST : state;
          transitions
            sampling: init -[on dispatch]-> CACCs {
              a_k:= u4; 
              msample := mu;psample:=p; error:=u; dd:=(x_k-x_e+u); CACC:=1
            };	
            
            controlspeed_cmd:CACCs -[t > 4 and t < 6]-> SP {
              if(dd-50> 0)
              	 control_a_e := 2-10*0.01*msample*#VehicleVar::cos*(psample)
              end if;
              if(v_e-v_k < 0 and dd-30 > 0 and dd-50 < 0)
              	  control_a_e := 1-10*0.01*msample*#VehicleVar::cos*(psample)
              end if;
              if(v_e-v_k > 0 and dd-30 > 0 and dd-50 < 0)
              	  control_a_e := -1-10*0.01*msample*#VehicleVar::cos*(psample)
              end if;
              if(dd-30 < 0)
              	  control_a_e := -2-10*0.01*msample*#VehicleVar::cos*(psample)
              end if;

              if (control_a_e > 0)
              	action:=1
              end if;
              if (control_a_e < 0)
              	action:=-1
              end if;
              
              if(abs(x_k-x_e)/abs(v_k-v_e)-2<0)
              	v_e:=0;
              	control_a_e :=0
              end if
              
              
              
            };
            
            steering_cmd:SP -[t > 8 and t < 9]-> ST;
            synch:ST -[t = period]-> init {
              t:=0
            };
            
        **};
    
	end CACCControllerThread.impl;
	process distance_voter
		features
			distance1: in data port datatypes::distance;
			distance2: in data port datatypes::distance;
			distance_result: out data port datatypes::distance;
		flows
			f0: flow path distance1 -> distance_result;
			f1: flow path distance2 -> distance_result;
	end distance_voter;

	process implementation distance_voter.i
	end distance_voter.i;

	process angle_analysis
		features
			Isangle: in data port Base_Types::Float;
			Osangle: out data port Base_Types::Float;
		flows
			f0: flow path Isangle -> Osangle;
	end angle_analysis;

	process implementation angle_analysis.i
	end angle_analysis.i;

	process image_analysis
		features
			picture: in data port datatypes::picture;
			obstacle_detected: out data port datatypes::boolean;
		flows
			f0: flow path picture -> obstacle_detected;
	end image_analysis;

	process implementation image_analysis.i
	end image_analysis.i;

	process overtaking_detection
		features
			lane_change: in data port datatypes::boolean;
			overtaking_active: out data port datatypes::boolean;
		flows
			f0: flow path lane_change -> overtaking_active;
	end overtaking_detection;

	process implementation overtaking_detection.i
	end overtaking_detection.i;

	process panel_controller
		features
			current_speed: in data port datatypes::speed;
			desired_speed: in data port datatypes::speed;
			current_speed_result: out data port datatypes::speed;
			desired_speed_result: out data port datatypes::speed;
		flows
			f0: flow path current_speed -> current_speed_result;
			f1: flow path desired_speed -> desired_speed_result;
	end panel_controller;

	process implementation panel_controller.i
	end panel_controller.i;

-----------------------------------------------------------------------------------------------------------------
	process speed_voter
		features
			speed1: in data port datatypes::speed;
			speed2: in data port datatypes::speed;
			speed_result: out data port datatypes::speed;
		flows
			f0: flow path speed1 -> speed_result;
			f1: flow path speed2 -> speed_result;
	end speed_voter;

	process implementation speed_voter.i
	end speed_voter.i;

---------------------------------------------------devices----------------------------------------------------	
	device camera
		features
			picture: out data port datatypes::picture;
		flows
			f0: flow source picture;
	end camera;

	device rainfall_sensor
		features
			rain: out data port datatypes::rain;
		flows
			f0: flow source rain;
	end rainfall_sensor;

	device light_sensor
		features
			light: out data port datatypes::light;
		flows
			f0: flow source light;
	end light_sensor;

	device steering_angle_sensor
	features
		steering_angle: out data port Base_Types::Float;
		psangle: in data port Base_Types::Float;
	flows
		f0: flow source steering_angle;
end steering_angle_sensor;

---------------------------------------------------------------
-- ref. Radar 1 / Radar 2 -------------------------------------
	device radar
		features
			distance: out data port datatypes::distance;
		flows
			f0: flow source distance;
	end radar;

	device radar1 extends radar
	end radar1;

	device radar2 extends radar
	end radar2;

----------------------------------------------------------------

	device traffic_lane_sensor
		features
			lane_crossed: out data port datatypes::boolean;
		flows
			f0: flow source lane_crossed;
	end traffic_lane_sensor;

----------------------------------------------------------------

	device speed_sensor
		features
			speed: out data port datatypes::speed;
		flows
			f0: flow source speed;
	end speed_sensor;

	device induction_speed_sensor extends speed_sensor
		features
			speed_v2: out data port datatypes::speed;
			
	end induction_speed_sensor;

	device optical_speed_sensor extends speed_sensor
		features
			speed_v1: out data port datatypes::speed;
	end optical_speed_sensor;


----------------------------------------------------------------
----------------------------------------------------------------
--------------------- DEVICES ------------------------
----------------------------------------------------------------


	device speedactuator
		features

		speed1: out data port datatypes::speed;
		speed2: out data port datatypes::speed;
		control_speed_cmd: in event data port Base_Types::Float;	
		control_a_e : in data port Base_Types::Float;
		flows
		f0: flow sink control_speed_cmd;
		
		properties
		Hybrid_EnvAADL::isActuator => true;
		Hybrid_EnvAADL::ContinuousDynamics => "v_e'=a_e;";

	end speedactuator;
	
	device implementation speedactuator.impl

		annex behavior_specification {**
		 variables
             a_e: Base_Types::Float;

          states
            init1 : initial complete state;
           	Afterspeed : state;
          transitions
              controlspeed_cmd : init1 -[on dispatch]-> Afterspeed{a_e:= control_a_e};
              synch : Afterspeed -[]-> init1;
            **};
	end speedactuator.impl;
		

	
	

	device Steering
		features
			steer_ing_cmd: in event data port Base_Types::Float;
			--osteering_cmd: out data port Base_Types::Float;
			pangle: out data port Base_Types::Float;

	end Steering;



end MultiStageDesign;