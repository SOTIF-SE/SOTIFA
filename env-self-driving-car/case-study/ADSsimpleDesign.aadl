package ADSS1
public

	with Data_Model;
	with Base_Types;
	with EnvAADL;
	with Dynamics;
	with VehiclePhysics;

	system ADSS1
		properties
		   Period =>3sec;
		   EnvAADL::Sampling_Time => 10 ms .. 30 ms;
		   EnvAADL::Response_Time => 40 ms .. 60 ms;
		   VehiclePhysics::Mass => 1500.0;
		   VehiclePhysics::Length => 2.0;
		   VehiclePhysics::CRotInert=> 1.2;
		   VehiclePhysics::CRollResis => 0.015;
		   VehiclePhysics::Amax => 10.0;
	end ADSS1;

	system implementation ADSS1.impl
	subcomponents
		Env: system Environment.impl;
		Plant : system Plant.impl;
		Control: process ControlProcess.impl;
	connections
			C1: port Env.Efriction -> Control.Ifriction;
			C2: port Env.Eslope -> Control.Islope;
			C3: port Env.EAeroDrag -> Control.IAeroDrag;
			C4: port Env.Ea_env -> Control.Ia_env;
			C5: port Env.ERandomActorX_env -> Control.IRandomActorX_env;
			C6: port Env.ERandomActorY_env -> Control.IRandomActorY_env;
			C7: port Env.ESignal_env -> Control.ISignal_env;
			C8: port Env.Eerr -> Control.Ierr;
						
						
			C9: port Env.Ex_env -> Control.Ix_env;
			C10: port Env.Ev_env -> Control.Iv_env;
						
			C11: port Env.Ey_env -> Control.Iy_env;
			C12: port Env.Eangle_env -> Control.Iangle_env;
			C13: port Env.Etheta_env ->Control.Itheta_env;
						
			C14: port Env.ErestrictedSignalAreaX_env -> Control.IrestrictedSignalAreaX_env;
			C15: port Env.EstaticActorX_env -> Control.IstaticActorX_env;
			C16: port Env.EstaticActorY_env -> Control.IstaticActorY_env;
			
			C17: port Control.Ocontrol_a_ego -> Plant.Icontrol_a_ego;
			C18: port Control.Ocontrol_theta_ego -> Plant.Icontrol_theta_ego;
			C19: port Plant.Ix_ego -> Control.Ix_ego;
			
			
	end ADSS1.impl;

--we add--
	system Environment
		features
			Efriction: out data port Dynamics::extInput;
			Eslope: out data port Dynamics::extInput;
			EAeroDrag: out data port Dynamics::extInput;
			Ea_env: out data port Dynamics::extInput;
			ERandomActorX_env: out data port Dynamics::extInput;
			ERandomActorY_env: out data port Dynamics::extInput;
			ESignal_env: out data port Dynamics::extInput;
			Eerr: out data port Dynamics::extInput;
			
			Eacc:out data port  Dynamics::extInput;
			Edec:out data port  Dynamics::extInput;
			
			
			Ex_env: out data port Base_Types::Float;
			Ev_env: out data port Base_Types::Float;
			
			Ey_env: out data port  Base_Types::Float;
			Eangle_env: out data port  Base_Types::Float;
			Etheta_env: out data port  Base_Types::Float;
			
			ErestrictedSignalAreaX_env:out data port  Base_Types::Float;
			EstaticActorX_env:out data port  Base_Types::Float;
			EstaticActorY_env:out data port  Base_Types::Float;
			
			
		properties
			EnvAADL::isEnvironment => true;			
end Environment;

	system implementation Environment.impl
		subcomponents
			friction: data Dynamics::extInput;
			slope: data Dynamics::extInput;
			AeroDrag: data Dynamics::extInput;
			
			a_env: data Dynamics::extInput;
			RandomActorX_env:data Dynamics::extInput;
			RandomActorY_env:data Dynamics::extInput;
			signal_env :  data Dynamics::extInput;
			err: data Dynamics::extInput;
			
			acc: data Dynamics::extInput;
			dec: data Dynamics::extInput;
			
			
			x_env: data Base_Types::Float;
			v_env: data Base_Types::Float;
			
			
			y_env: data Base_Types::Float;
			angle_env: data Base_Types::Float;
			theta_env: data Base_Types::Float;
			
			restrictedSignalAreaX_env:data Base_Types::Float;
			staticActorX_env:data Base_Types::Float;
			staticActorY_env:data Base_Types::Float;
			
			
--			EnvironmentThread : thread EnvironmentThread.i;
		connections
			C1: port friction -> Efriction;
			C2: port slope -> Eslope;
			C3: port AeroDrag -> EAeroDrag;
			C4: port a_env -> Ea_env;
			C5: port RandomActorX_env -> ERandomActorX_env;
			C6: port RandomActorY_env -> ERandomActorY_env;
			C7: port Signal_env -> ESignal_env;
			C8: port err -> Eerr;
			C81: port acc -> Eacc;
			C82: port dec -> Edec;
						
						
			C9: port x_env -> Ex_env;
			C10: port v_env -> Ev_env;
						
			C11: port y_env -> Ey_env;
			C12: port angle_env -> Eangle_env;
			C13: port theta_env ->Etheta_env;
						
			C14: port restrictedSignalAreaX_env -> ErestrictedSignalAreaX_env;
			C15: port staticActorX_env -> EstaticActorX_env;
			C16: port staticActorY_env -> EstaticActorY_env;
	    
		properties
		EnvAADL::initvar => "x_env==50 & y_env==0.01 & v_env==5 & a_env==0 & angle_env==0 & theta_env==0 & 0<staticActorX_env<100 & 0<staticActorY_env<100 & restrictedSignalAreaX_env ==50";
		EnvAADL::env_var =>"[friction,slope,AeroDrag, a_env, err,RandomActorX_env,RandomActorY_env, signal_env, acc, dec]";
		EnvAADL::env_min => "[ 0.7, 0.06, 400, -2, -1, 0, 0,   0,  8, -8]";
		EnvAADL::env_max => "[ 0.9, 0.1, 500, 2,  1, 100, 100, 1, 10, -4]";
		EnvAADL::ContinuousDynamics => "x_env'=v_env ; v_env'=a_env ;";
		annex behavior_specification {**
          states
            init3 : initial complete state;
            **};
		
	end Environment.impl;
	
	process ControlProcess
		features
		Ifriction: in data port Dynamics::extInput;
		Islope: in data port Dynamics::extInput;
		IAeroDrag: in data port Dynamics::extInput;
		Ia_env: in data port Dynamics::extInput;
		IRandomActorX_env: in data port Dynamics::extInput;
		IRandomActorY_env: in data port Dynamics::extInput;
		ISignal_env: in data port Dynamics::extInput;
		Ierr: in data port Dynamics::extInput;
		Iacc: in data port Dynamics::extInput;
		Idec: in data port Dynamics::extInput;
	
		Ix_env: in data port Base_Types::Float;
		Iv_env: in data port Base_Types::Float;
			
		Iy_env: in data port  Base_Types::Float;
		Iangle_env: in data port  Base_Types::Float;
		Itheta_env: in data port  Base_Types::Float;
			
		IrestrictedSignalAreaX_env:in data port  Base_Types::Float;
		IstaticActorX_env:in data port  Base_Types::Float;
		IstaticActorY_env:in data port  Base_Types::Float;
		
		Ocontrol_a_ego: out data port Base_Types::Float;
		Ocontrol_theta_ego: out data port Base_Types::Float;
		Ix_ego: in data port Base_Types::Float;
		
	end ControlProcess;
	
	process implementation ControlProcess.impl
		subcomponents
			ADSController : thread ADSController.impl;
		connections
			C1: port Ifriction -> ADSController.Ifriciton;
			C2: port Islope -> ADSController.Islope;
			C3: port IAeroDrag -> ADSController.IAeroDrag;
			C4: port Ia_env -> ADSController.Ia_env;
			C5: port IRandomActorX_env -> ADSController.IRandomActorX_env;
			C6: port IRandomActorY_env -> ADSController.IRandomActorY_env;
			C7: port ISignal_env -> ADSController.ISignal_env;
			C8: port Ierr -> ADSController.Ierr;
			C81: port Iacc -> ADSController.Iacc;
			C82: port Idec -> ADSController.Idec;
						
						
			C9: port Ix_env -> ADSController.Ix_env;
			C10: port Iv_env -> ADSController.Iv_env;
						
			C11: port Iy_env -> ADSController.Iy_env;
			C12: port Iangle_env -> ADSController.Iangle_env;
			C13: port Itheta_env ->ADSController.Itheta_env;
						
			C14: port IrestrictedSignalAreaX_env -> ADSController.IrestrictedSignalAreaX_env;
			C15: port IstaticActorX_env -> ADSController.IstaticActorX_env;
			C16: port IstaticActorY_env -> ADSController.IstaticActorY_env;	
			
			C17: port Ix_ego -> ADSController.Ix_ego;	
			C18: port ADSController.Ocontrol_a_ego ->Ocontrol_a_ego;	
			C19: port ADSController.Ocontrol_theta_ego ->Ocontrol_theta_ego;	

			
	end ControlProcess.impl;

	thread ADSController
	features
		Ifriciton: in data port Dynamics::extInput;
		Islope: in data port Dynamics::extInput;
		IAeroDrag: in data port Dynamics::extInput;
		Ia_env: in data port Dynamics::extInput;
		IRandomActorX_env: in data port Dynamics::extInput;
		IRandomActorY_env: in data port Dynamics::extInput;
		ISignal_env: in data port Dynamics::extInput;
		Ierr: in data port Dynamics::extInput;
		
		Iacc: in data port Dynamics::extInput;
		Idec: in data port Dynamics::extInput;
	
		Ix_env: in data port Base_Types::Float;
		Iv_env: in data port Base_Types::Float;
			
		Iy_env: in data port  Base_Types::Float;
		Iangle_env: in data port  Base_Types::Float;
		Itheta_env: in data port  Base_Types::Float;
			
		IrestrictedSignalAreaX_env:in data port  Base_Types::Float;
		IstaticActorX_env:in data port  Base_Types::Float;
		IstaticActorY_env:in data port  Base_Types::Float;
			
		Ix_ego: in data port Base_Types::Float;
		Ocontrol_a_ego: out data port Base_Types::Float;
		Ocontrol_theta_ego: out data port Base_Types::Float;
	properties
		Dispatch_Protocol => Periodic;
		EnvAADL::isController => true;
end ADSController;

	thread implementation ADSController.impl
		subcomponents			
			
		    frictionsample : data Base_Types::Float;
		    slopesample : data Base_Types::Float;
		    errorsample : data Base_Types::Float;
		    x_envsample : data Base_Types::Float;

		    friction: data Dynamics::extInput;
			slope: data Dynamics::extInput;
			AeroDrag: data Dynamics::extInput;
			
			a_env: data Dynamics::extInput;
			RandomActorX_env:data Dynamics::extInput;
			RandomActorY_env:data Dynamics::extInput;
			signal_env :  data Dynamics::extInput;
			err: data Dynamics::extInput;
			acc: data Dynamics::extInput;
			dec: data Dynamics::extInput;

			x_env: data Base_Types::Float;
			
			x_ego : data Base_Types::Float;
			y_ego : data Base_Types::Float;
		
		    v_env : data Base_Types::Float;
		    v_ego : data Base_Types::Float;
		    angle_ego : data Base_Types::Float;

		    restrictedSignalAreaX_env : data Base_Types::Float;

			
			staticActorX_env :  data Base_Types::Float;
			staticActorY_env :  data Base_Types::Float;
			
			staticActorX_envsample :   data Base_Types::Float;
			staticActorY_envsample :   data Base_Types::Float;
			
			RandomActorX_envsample :   data Base_Types::Float;
			RandomActorY_envsample :   data Base_Types::Float;
			restrictedSignalAreaX_envsample :   data Base_Types::Float;
			signal_envsample :   data Base_Types::Float;
			control_theta_ego :  data Base_Types::Float;
			
		    D : data Base_Types::Float;
		    dc : data Base_Types::Float;
		    dt : data Base_Types::Float;
		    dsafe : data Base_Types::Float;
		    dd : data Base_Types::Float;
			
		    danger : data Base_Types::Float;
		    
		    control_a_ego : data Base_Types::Float;
		    
		    action: data Base_Types::Float {Data_Model::Initial_Value => ("0");};
		    
		    a_ego : data Base_Types::Float;
		--connections
			--C1: port Ifriction -> friciton;
		
		properties
			EnvAADL::Action=> (-1,1);

		annex behavior_specification {**
          states
            init : initial complete state ;
            CACCs : state;
            SP : state;
            ST : state;
          transitions
            sampling_sampl: init -[on dispatch]-> CACCs {
              frictionsample := friction;slopesample:=slope; errorsample:=err;
              staticActorX_envsample:=staticActorX_env; staticActorY_envsample:=staticActorY_env;
 RandomActorX_envsample:=RandomActorX_env  ; RandomActorY_envsample:=RandomActorY_env  ; restrictedSignalAreaX_envsample:=restrictedSignalAreaX_env  ; signal_envsample:=signal_env  ; 
 x_envsample:=x_env

            };	
            controlspeed_cmd:CACCs -[]-> SP {
              dd:=(x_envsample-x_ego+errorsample);
              if(abs(staticActorX_envsample -x_ego)-0.5<0 and abs(staticActorY_envsample -y_ego)-0.5<0)
            	danger:=1
              end if;
              if(abs(RandomActorX_envsample -x_ego)-0.5<0 and abs(RandomActorY_envsample -y_ego)-0.5<0)
            	danger:=1
              end if;
              if(abs(restrictedSignalAreaX_envsample)-0.5<0 and signal_envsample -0.5>0)
            	danger:=1
              end if;
            
              if (danger>0)
              	control_a_ego := -3-10*0.01*frictionsample*#VehiclePhysics::cos*(slopesample)
              end if;
              if(danger<=0 and dd-20> 0)
              	 control_a_ego := acc-10*0.01*frictionsample*#VehiclePhysics::cos*(slopesample)
              end if;
              if(danger<=0 and dd-20< 0)
              	 control_a_ego := dec-10*0.01*frictionsample*#VehiclePhysics::cos*(slopesample)
              end if;
              
              if(control_a_ego > 0)
              	  action:=1
              end if;
              if(control_a_ego < 0)
              	  action:=-1
              end if

            };
            
            steer_cmd:SP -[]-> ST{control_theta_ego:=0};
            updateControlRound_sync:ST -[]-> init;
            
        **};
    
	end ADSController.impl;
	
	
----------------------------------------------------------------
--------------------- Plant ------------------------
----------------------------------------------------------------


	system Plant
		features

		--control_speed_cmd: in event data port Base_Types::Boolean;
		--control_steer_cmd: in event data port Base_Types::Boolean;
		Ix_ego: out data port Base_Types::Float;

		Icontrol_a_ego: in data port Base_Types::Float;
		Icontrol_theta_ego: in data port Base_Types::Float;
		properties
		EnvAADL::isPlant => true;

	end Plant;
	
	system implementation Plant.impl
		subcomponents			
		control_a_ego : data Base_Types::Float;
		control_theta_ego : data Base_Types::Float;
		x_ego : data Base_Types::Float;
		v_ego : data Base_Types::Float;
		a_ego : data Base_Types::Float;
		theta_ego : data Base_Types::Float;
		
		connections
		C1: port x_ego -> Ix_ego;
		C2: port Icontrol_a_ego -> control_a_ego;
		C3: port Icontrol_theta_ego -> control_theta_ego;
		
		properties
		EnvAADL::initvar => "x_ego==0 & y_ego==0 & v_ego==10 & angle_ego==0 & theta_ego==0 & a_ego==0";
		EnvAADL::ContinuousDynamics => "x_ego'=v_ego;v_ego'=a_ego;";
				
		annex behavior_specification {**
		 --variables
           --  a_ego: Base_Types::Float;
          states
            init1 : initial state;
          transitions
              controlspeed_cmd : init1 -[]-> init1{a_ego:= control_a_ego};
              steer_cmd :        init1 -[]-> init1{theta_ego:= control_theta_ego};

         **};
            
        
	end Plant.impl;

end ADSS1;